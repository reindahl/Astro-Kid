
./fast-downward.py ../astro/prob01.pddl --translate-options --relaxed --search-options --search "astar(blind())"



pddl
	single agent planing

	complete pddl not fully supported by most planners


problem areas

	concurrent actions
	delayed actions effects

	
solution
	lock action so delayed actions happens first (until they stop)
		simple
		special case for the given level will not work on all possible levels.
	
	order the actions
		so each moving object takes turns
		depends on how collision handling works
	
	simultaneous actions - multiple functions
		using different actions for multiple movements
		
	simultaneous actions - recursion
		

		
		
	update fuction
		predicate that forces switch between update and player action
		forall and when updates relevant options.
		only interrested in player actions,
		seperate updates to environment from player actions
		
		exist ensures all are updated
	
edges of the map
	padding add sides and bottom
	bottem disignated boarder and anything there should be removed


action cost
	action cost is used to ensure that the varying lenght of the update sequence dosnt influence the found plan
	
domain location can be simplified using axioms (Derived Predicates)
	(:derived (above ?x ?y)
		(or (on ?x ?y)
			(exists (?z) 
				(and 
					(above ?x ?z)
					(above ?z ?y))
				)
		)
	)


	
		
performance 
	adl vs strips
		adl not widely supported
		forall can be avoid totally
		
	optimizing description (pddl)
		hard: different planners have different strengths
		axioms gennerally not well supported
			avoid them
			fast downwards converts univarsal quantifiers (forall) to axioms
		
	directe effect vs delayed effect( effect first applied in update)